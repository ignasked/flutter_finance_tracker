// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'backend/models/account.dart';
import 'backend/models/category.dart';
import 'backend/models/transaction.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 1380094922926077824),
      name: 'Transaction',
      lastPropertyId: const obx_int.IdUid(14, 4366251851602547332),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 792970872025231203),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1461880218571713890),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6393892280437039411),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6651851518781937861),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7831126263941629501),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 8794143413428559289),
            relationTarget: 'Category'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5558096695123691779),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 90293198016158302),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 1664079131372770447),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 7722361599150347351),
            name: 'fromAccountId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 7992100684711503144),
            relationTarget: 'Account'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 2686481647713928676),
            name: 'toAccountId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 3173231574842338743),
            relationTarget: 'Account'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 4366251851602547332),
            name: 'userId',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(5, 2320810090527615073))
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 6364566181600309643),
      name: 'Category',
      lastPropertyId: const obx_int.IdUid(10, 1308887976627578461),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4875631690864412976),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4377061731528793579),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3078786122418248550),
            name: 'descriptionForAI',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7881552178410288707),
            name: 'isEnabled',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 626766704933445069),
            name: 'iconCodePoint',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2731193553403493661),
            name: 'typeValue',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1698196631533817491),
            name: 'colorValue',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4637453938235897333),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1181372859796335165),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1308887976627578461),
            name: 'userId',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'transactions',
            srcEntity: 'Transaction',
            srcField: 'category')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 1793876900561739160),
      name: 'Account',
      lastPropertyId: const obx_int.IdUid(14, 4503427942151526522),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4908124682675194776),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4925447501015872339),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6146198306681935013),
            name: 'iconCodePoint',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2424780407380365336),
            name: 'colorValue',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4388684377286962396),
            name: 'balance',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2424376348139700456),
            name: 'isEnabled',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4990014992515693203),
            name: 'typeValue',
            type: 5,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8058047281768453366),
            name: 'excludeFromTotalBalance',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 5137004119186492609),
            name: 'currency',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 2339032833852213886),
            name: 'currencySymbol',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 6810773419578295686),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 864178891988542051),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 4503427942151526522),
            name: 'userId',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'transactionsFrom',
            srcEntity: 'Transaction',
            srcField: 'fromAccount'),
        obx_int.ModelBacklink(
            name: 'transactionsTo',
            srcEntity: 'Transaction',
            srcField: 'toAccount')
      ])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 1793876900561739160),
      lastIndexId: const obx_int.IdUid(5, 2320810090527615073),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [8691141417268497684],
      retiredPropertyUids: const [
        3854934649027657622,
        2820295823686522613,
        157190384727437192,
        2107624887463801340
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Transaction: obx_int.EntityDefinition<Transaction>(
        model: _entities[0],
        toOneRelations: (Transaction object) =>
            [object.category, object.fromAccount, object.toAccount],
        toManyRelations: (Transaction object) => {},
        getId: (Transaction object) => object.id,
        setId: (Transaction object, int id) {
          object.id = id;
        },
        objectToFB: (Transaction object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          fbb.startTable(15);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addFloat64(2, object.amount);
          fbb.addInt64(5, object.date.millisecondsSinceEpoch);
          fbb.addInt64(6, object.category.targetId);
          fbb.addOffset(7, descriptionOffset);
          fbb.addInt64(9, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(10, object.updatedAt.millisecondsSinceEpoch);
          fbb.addInt64(11, object.fromAccount.targetId);
          fbb.addInt64(12, object.toAccount.targetId);
          fbb.addOffset(13, userIdOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final amountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0));
          final userIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final object = Transaction(
              id: idParam,
              title: titleParam,
              amount: amountParam,
              description: descriptionParam,
              date: dateParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam,
              userId: userIdParam);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.category.attach(store);
          object.fromAccount.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.fromAccount.attach(store);
          object.toAccount.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.toAccount.attach(store);
          return object;
        }),
    Category: obx_int.EntityDefinition<Category>(
        model: _entities[1],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {
              obx_int.RelInfo<Transaction>.toOneBacklink(7, object.id,
                      (Transaction srcObject) => srcObject.category):
                  object.transactions
            },
        getId: (Category object) => object.id,
        setId: (Category object, int id) {
          object.id = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final descriptionForAIOffset =
              fbb.writeString(object.descriptionForAI);
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, descriptionForAIOffset);
          fbb.addBool(3, object.isEnabled);
          fbb.addInt64(4, object.iconCodePoint);
          fbb.addInt64(5, object.typeValue);
          fbb.addInt64(6, object.colorValue);
          fbb.addInt64(7, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(8, object.updatedAt.millisecondsSinceEpoch);
          fbb.addOffset(9, userIdOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionForAIParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final colorValueParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final iconCodePointParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final typeValueParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final isEnabledParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0));
          final userIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final object = Category(
              id: idParam,
              title: titleParam,
              descriptionForAI: descriptionForAIParam,
              colorValue: colorValueParam,
              iconCodePoint: iconCodePointParam,
              typeValue: typeValueParam,
              isEnabled: isEnabledParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam,
              userId: userIdParam);
          obx_int.InternalToManyAccess.setRelInfo<Category>(
              object.transactions,
              store,
              obx_int.RelInfo<Transaction>.toOneBacklink(
                  7, object.id, (Transaction srcObject) => srcObject.category));
          return object;
        }),
    Account: obx_int.EntityDefinition<Account>(
        model: _entities[2],
        toOneRelations: (Account object) => [],
        toManyRelations: (Account object) => {
              obx_int.RelInfo<Transaction>.toOneBacklink(12, object.id,
                      (Transaction srcObject) => srcObject.fromAccount):
                  object.transactionsFrom,
              obx_int.RelInfo<Transaction>.toOneBacklink(13, object.id,
                      (Transaction srcObject) => srcObject.toAccount):
                  object.transactionsTo
            },
        getId: (Account object) => object.id,
        setId: (Account object, int id) {
          object.id = id;
        },
        objectToFB: (Account object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final currencyOffset = fbb.writeString(object.currency);
          final currencySymbolOffset = object.currencySymbol == null
              ? null
              : fbb.writeString(object.currencySymbol!);
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          fbb.startTable(15);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(3, object.iconCodePoint);
          fbb.addInt64(4, object.colorValue);
          fbb.addFloat64(5, object.balance);
          fbb.addBool(6, object.isEnabled);
          fbb.addInt32(7, object.typeValue);
          fbb.addBool(8, object.excludeFromTotalBalance);
          fbb.addOffset(9, currencyOffset);
          fbb.addOffset(10, currencySymbolOffset);
          fbb.addInt64(11, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(12, object.updatedAt.millisecondsSinceEpoch);
          fbb.addOffset(13, userIdOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final typeValueParam =
              const fb.Int32Reader().vTableGet(buffer, rootOffset, 18, 0);
          final currencyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final currencySymbolParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24);
          final balanceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final iconCodePointParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final colorValueParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final isEnabledParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final excludeFromTotalBalanceParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0));
          final userIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final object = Account(
              id: idParam,
              name: nameParam,
              typeValue: typeValueParam,
              currency: currencyParam,
              currencySymbol: currencySymbolParam,
              balance: balanceParam,
              iconCodePoint: iconCodePointParam,
              colorValue: colorValueParam,
              isEnabled: isEnabledParam,
              excludeFromTotalBalance: excludeFromTotalBalanceParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam,
              userId: userIdParam);
          obx_int.InternalToManyAccess.setRelInfo<Account>(
              object.transactionsFrom,
              store,
              obx_int.RelInfo<Transaction>.toOneBacklink(12, object.id,
                  (Transaction srcObject) => srcObject.fromAccount));
          obx_int.InternalToManyAccess.setRelInfo<Account>(
              object.transactionsTo,
              store,
              obx_int.RelInfo<Transaction>.toOneBacklink(13, object.id,
                  (Transaction srcObject) => srcObject.toAccount));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Transaction] entity fields to define ObjectBox queries.
class Transaction_ {
  /// See [Transaction.id].
  static final id =
      obx.QueryIntegerProperty<Transaction>(_entities[0].properties[0]);

  /// See [Transaction.title].
  static final title =
      obx.QueryStringProperty<Transaction>(_entities[0].properties[1]);

  /// See [Transaction.amount].
  static final amount =
      obx.QueryDoubleProperty<Transaction>(_entities[0].properties[2]);

  /// See [Transaction.date].
  static final date =
      obx.QueryDateProperty<Transaction>(_entities[0].properties[3]);

  /// See [Transaction.category].
  static final category =
      obx.QueryRelationToOne<Transaction, Category>(_entities[0].properties[4]);

  /// See [Transaction.description].
  static final description =
      obx.QueryStringProperty<Transaction>(_entities[0].properties[5]);

  /// See [Transaction.createdAt].
  static final createdAt =
      obx.QueryDateProperty<Transaction>(_entities[0].properties[6]);

  /// See [Transaction.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<Transaction>(_entities[0].properties[7]);

  /// See [Transaction.fromAccount].
  static final fromAccount =
      obx.QueryRelationToOne<Transaction, Account>(_entities[0].properties[8]);

  /// See [Transaction.toAccount].
  static final toAccount =
      obx.QueryRelationToOne<Transaction, Account>(_entities[0].properties[9]);

  /// See [Transaction.userId].
  static final userId =
      obx.QueryStringProperty<Transaction>(_entities[0].properties[10]);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// See [Category.id].
  static final id =
      obx.QueryIntegerProperty<Category>(_entities[1].properties[0]);

  /// See [Category.title].
  static final title =
      obx.QueryStringProperty<Category>(_entities[1].properties[1]);

  /// See [Category.descriptionForAI].
  static final descriptionForAI =
      obx.QueryStringProperty<Category>(_entities[1].properties[2]);

  /// See [Category.isEnabled].
  static final isEnabled =
      obx.QueryBooleanProperty<Category>(_entities[1].properties[3]);

  /// See [Category.iconCodePoint].
  static final iconCodePoint =
      obx.QueryIntegerProperty<Category>(_entities[1].properties[4]);

  /// See [Category.typeValue].
  static final typeValue =
      obx.QueryIntegerProperty<Category>(_entities[1].properties[5]);

  /// See [Category.colorValue].
  static final colorValue =
      obx.QueryIntegerProperty<Category>(_entities[1].properties[6]);

  /// See [Category.createdAt].
  static final createdAt =
      obx.QueryDateProperty<Category>(_entities[1].properties[7]);

  /// See [Category.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<Category>(_entities[1].properties[8]);

  /// See [Category.userId].
  static final userId =
      obx.QueryStringProperty<Category>(_entities[1].properties[9]);

  /// see [Category.transactions]
  static final transactions =
      obx.QueryBacklinkToMany<Transaction, Category>(Transaction_.category);
}

/// [Account] entity fields to define ObjectBox queries.
class Account_ {
  /// See [Account.id].
  static final id =
      obx.QueryIntegerProperty<Account>(_entities[2].properties[0]);

  /// See [Account.name].
  static final name =
      obx.QueryStringProperty<Account>(_entities[2].properties[1]);

  /// See [Account.iconCodePoint].
  static final iconCodePoint =
      obx.QueryIntegerProperty<Account>(_entities[2].properties[2]);

  /// See [Account.colorValue].
  static final colorValue =
      obx.QueryIntegerProperty<Account>(_entities[2].properties[3]);

  /// See [Account.balance].
  static final balance =
      obx.QueryDoubleProperty<Account>(_entities[2].properties[4]);

  /// See [Account.isEnabled].
  static final isEnabled =
      obx.QueryBooleanProperty<Account>(_entities[2].properties[5]);

  /// See [Account.typeValue].
  static final typeValue =
      obx.QueryIntegerProperty<Account>(_entities[2].properties[6]);

  /// See [Account.excludeFromTotalBalance].
  static final excludeFromTotalBalance =
      obx.QueryBooleanProperty<Account>(_entities[2].properties[7]);

  /// See [Account.currency].
  static final currency =
      obx.QueryStringProperty<Account>(_entities[2].properties[8]);

  /// See [Account.currencySymbol].
  static final currencySymbol =
      obx.QueryStringProperty<Account>(_entities[2].properties[9]);

  /// See [Account.createdAt].
  static final createdAt =
      obx.QueryDateProperty<Account>(_entities[2].properties[10]);

  /// See [Account.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<Account>(_entities[2].properties[11]);

  /// See [Account.userId].
  static final userId =
      obx.QueryStringProperty<Account>(_entities[2].properties[12]);

  /// see [Account.transactionsFrom]
  static final transactionsFrom =
      obx.QueryBacklinkToMany<Transaction, Account>(Transaction_.fromAccount);

  /// see [Account.transactionsTo]
  static final transactionsTo =
      obx.QueryBacklinkToMany<Transaction, Account>(Transaction_.toAccount);
}
