// Mocks generated by Mockito 5.4.5 from annotations
// in money_owl/test/front/shared/data_management_cubit/data_management_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:bloc/bloc.dart' as _i14;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;
import 'package:money_owl/backend/models/account.dart' as _i10;
import 'package:money_owl/backend/models/category.dart' as _i3;
import 'package:money_owl/backend/models/transaction.dart' as _i7;
import 'package:money_owl/backend/repositories/account_repository.dart' as _i9;
import 'package:money_owl/backend/repositories/category_repository.dart'
    as _i11;
import 'package:money_owl/backend/repositories/transaction_repository.dart'
    as _i5;
import 'package:money_owl/backend/services/sync_service.dart' as _i6;
import 'package:money_owl/front/shared/filter_cubit/filter_cubit.dart' as _i13;
import 'package:money_owl/front/shared/filter_cubit/filter_state.dart' as _i4;
import 'package:money_owl/objectbox.g.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBox_0<T> extends _i1.SmartFake implements _i2.Box<T> {
  _FakeBox_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStore_1 extends _i1.SmartFake implements _i2.Store {
  _FakeStore_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCategory_2 extends _i1.SmartFake implements _i3.Category {
  _FakeCategory_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFilterState_3 extends _i1.SmartFake implements _i4.FilterState {
  _FakeFilterState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TransactionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionRepository extends _i1.Mock
    implements _i5.TransactionRepository {
  MockTransactionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set syncService(_i6.SyncService? _syncService) => super.noSuchMethod(
        Invocation.setter(
          #syncService,
          _syncService,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Box<_i7.Transaction> get box => (super.noSuchMethod(
        Invocation.getter(#box),
        returnValue: _FakeBox_0<_i7.Transaction>(
          this,
          Invocation.getter(#box),
        ),
      ) as _i2.Box<_i7.Transaction>);

  @override
  set box(_i2.Box<_i7.Transaction>? _box) => super.noSuchMethod(
        Invocation.setter(
          #box,
          _box,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Store get store => (super.noSuchMethod(
        Invocation.getter(#store),
        returnValue: _FakeStore_1(
          this,
          Invocation.getter(#store),
        ),
      ) as _i2.Store);

  @override
  _i8.Future<List<_i7.Transaction>> getAllModifiedSince(DateTime? time) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllModifiedSince,
          [time],
        ),
        returnValue:
            _i8.Future<List<_i7.Transaction>>.value(<_i7.Transaction>[]),
      ) as _i8.Future<List<_i7.Transaction>>);

  @override
  _i8.Future<int> put(
    _i7.Transaction? transaction, {
    _i6.SyncSource? syncSource = _i6.SyncSource.local,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [transaction],
          {#syncSource: syncSource},
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<List<_i7.Transaction>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue:
            _i8.Future<List<_i7.Transaction>>.value(<_i7.Transaction>[]),
      ) as _i8.Future<List<_i7.Transaction>>);

  @override
  _i8.Future<_i7.Transaction?> getById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i8.Future<_i7.Transaction?>.value(),
      ) as _i8.Future<_i7.Transaction?>);

  @override
  _i8.Future<bool> remove(int? id) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [id],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> restoreTransaction(int? id) => (super.noSuchMethod(
        Invocation.method(
          #restoreTransaction,
          [id],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<int> assignUserIdToNullEntries(String? newUserId) =>
      (super.noSuchMethod(
        Invocation.method(
          #assignUserIdToNullEntries,
          [newUserId],
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> removeAllForCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #removeAllForCurrentUser,
          [],
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> hardDeleteAllForCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #hardDeleteAllForCurrentUser,
          [],
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> removeAll() => (super.noSuchMethod(
        Invocation.method(
          #removeAll,
          [],
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<List<int>> putMany(
    List<_i7.Transaction>? entities, {
    _i6.SyncSource? syncSource = _i6.SyncSource.local,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putMany,
          [entities],
          {#syncSource: syncSource},
        ),
        returnValue: _i8.Future<List<int>>.value(<int>[]),
      ) as _i8.Future<List<int>>);

  @override
  _i8.Future<List<_i7.Transaction>> getFiltered(_i4.FilterState? filterState) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFiltered,
          [filterState],
        ),
        returnValue:
            _i8.Future<List<_i7.Transaction>>.value(<_i7.Transaction>[]),
      ) as _i8.Future<List<_i7.Transaction>>);

  @override
  _i8.Future<List<_i7.Transaction>> getManyByIds(
    List<int>? ids, {
    bool? includeDeleted = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getManyByIds,
          [ids],
          {#includeDeleted: includeDeleted},
        ),
        returnValue:
            _i8.Future<List<_i7.Transaction>>.value(<_i7.Transaction>[]),
      ) as _i8.Future<List<_i7.Transaction>>);

  @override
  _i8.Future<bool> hasLocalOnlyData() => (super.noSuchMethod(
        Invocation.method(
          #hasLocalOnlyData,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<int> removeMany(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #removeMany,
          [ids],
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<bool> softRemove(int? id) => (super.noSuchMethod(
        Invocation.method(
          #softRemove,
          [id],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> restore(int? id) => (super.noSuchMethod(
        Invocation.method(
          #restore,
          [id],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}

/// A class which mocks [AccountRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountRepository extends _i1.Mock implements _i9.AccountRepository {
  MockAccountRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set syncService(_i6.SyncService? _syncService) => super.noSuchMethod(
        Invocation.setter(
          #syncService,
          _syncService,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Box<_i10.Account> get box => (super.noSuchMethod(
        Invocation.getter(#box),
        returnValue: _FakeBox_0<_i10.Account>(
          this,
          Invocation.getter(#box),
        ),
      ) as _i2.Box<_i10.Account>);

  @override
  set box(_i2.Box<_i10.Account>? _box) => super.noSuchMethod(
        Invocation.setter(
          #box,
          _box,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Store get store => (super.noSuchMethod(
        Invocation.getter(#store),
        returnValue: _FakeStore_1(
          this,
          Invocation.getter(#store),
        ),
      ) as _i2.Store);

  @override
  _i8.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> initializeDefaultAccounts() => (super.noSuchMethod(
        Invocation.method(
          #initializeDefaultAccounts,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setDefaultAccount() => (super.noSuchMethod(
        Invocation.method(
          #setDefaultAccount,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i10.Account>> getEnabledAccounts() => (super.noSuchMethod(
        Invocation.method(
          #getEnabledAccounts,
          [],
        ),
        returnValue: _i8.Future<List<_i10.Account>>.value(<_i10.Account>[]),
      ) as _i8.Future<List<_i10.Account>>);

  @override
  _i8.Future<List<_i10.Account>> getAllModifiedSince(DateTime? time) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllModifiedSince,
          [time],
        ),
        returnValue: _i8.Future<List<_i10.Account>>.value(<_i10.Account>[]),
      ) as _i8.Future<List<_i10.Account>>);

  @override
  _i8.Future<List<_i10.Account>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i8.Future<List<_i10.Account>>.value(<_i10.Account>[]),
      ) as _i8.Future<List<_i10.Account>>);

  @override
  _i8.Future<_i10.Account?> getById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i8.Future<_i10.Account?>.value(),
      ) as _i8.Future<_i10.Account?>);

  @override
  _i8.Future<List<_i10.Account>> getManyByIds(
    List<int>? ids, {
    bool? includeDeleted = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getManyByIds,
          [ids],
          {#includeDeleted: includeDeleted},
        ),
        returnValue: _i8.Future<List<_i10.Account>>.value(<_i10.Account>[]),
      ) as _i8.Future<List<_i10.Account>>);

  @override
  _i8.Future<bool> remove(int? id) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [id],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> restoreAccount(int? id) => (super.noSuchMethod(
        Invocation.method(
          #restoreAccount,
          [id],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<int> assignUserIdToNullEntries(String? newUserId) =>
      (super.noSuchMethod(
        Invocation.method(
          #assignUserIdToNullEntries,
          [newUserId],
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> removeNonDefaultForCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #removeNonDefaultForCurrentUser,
          [],
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> removeAll() => (super.noSuchMethod(
        Invocation.method(
          #removeAll,
          [],
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> put(
    _i10.Account? account, {
    _i6.SyncSource? syncSource = _i6.SyncSource.local,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [account],
          {#syncSource: syncSource},
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<List<int>> putMany(
    List<_i10.Account>? entities, {
    _i6.SyncSource? syncSource = _i6.SyncSource.local,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putMany,
          [entities],
          {#syncSource: syncSource},
        ),
        returnValue: _i8.Future<List<int>>.value(<int>[]),
      ) as _i8.Future<List<int>>);

  @override
  _i8.Future<int> hardDeleteAllForCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #hardDeleteAllForCurrentUser,
          [],
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<int> removeMany(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #removeMany,
          [ids],
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<bool> softRemove(int? id) => (super.noSuchMethod(
        Invocation.method(
          #softRemove,
          [id],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> restore(int? id) => (super.noSuchMethod(
        Invocation.method(
          #restore,
          [id],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}

/// A class which mocks [CategoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryRepository extends _i1.Mock
    implements _i11.CategoryRepository {
  MockCategoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set syncService(_i6.SyncService? _syncService) => super.noSuchMethod(
        Invocation.setter(
          #syncService,
          _syncService,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Box<_i3.Category> get box => (super.noSuchMethod(
        Invocation.getter(#box),
        returnValue: _FakeBox_0<_i3.Category>(
          this,
          Invocation.getter(#box),
        ),
      ) as _i2.Box<_i3.Category>);

  @override
  set box(_i2.Box<_i3.Category>? _box) => super.noSuchMethod(
        Invocation.setter(
          #box,
          _box,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Store get store => (super.noSuchMethod(
        Invocation.getter(#store),
        returnValue: _FakeStore_1(
          this,
          Invocation.getter(#store),
        ),
      ) as _i2.Store);

  @override
  _i8.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> initializeDefaultCategories() => (super.noSuchMethod(
        Invocation.method(
          #initializeDefaultCategories,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setDefaultCategory() => (super.noSuchMethod(
        Invocation.method(
          #setDefaultCategory,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<bool> isTitleUnique(String? title) => (super.noSuchMethod(
        Invocation.method(
          #isTitleUnique,
          [title],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<List<_i3.Category>> getEnabledCategories() => (super.noSuchMethod(
        Invocation.method(
          #getEnabledCategories,
          [],
        ),
        returnValue: _i8.Future<List<_i3.Category>>.value(<_i3.Category>[]),
      ) as _i8.Future<List<_i3.Category>>);

  @override
  _i8.Future<String> getEnabledCategoryTitles() => (super.noSuchMethod(
        Invocation.method(
          #getEnabledCategoryTitles,
          [],
        ),
        returnValue: _i8.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #getEnabledCategoryTitles,
            [],
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<_i3.Category> getDefaultCategory() => (super.noSuchMethod(
        Invocation.method(
          #getDefaultCategory,
          [],
        ),
        returnValue: _i8.Future<_i3.Category>.value(_FakeCategory_2(
          this,
          Invocation.method(
            #getDefaultCategory,
            [],
          ),
        )),
      ) as _i8.Future<_i3.Category>);

  @override
  _i8.Future<List<_i3.Category>> getAllModifiedSince(DateTime? time) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllModifiedSince,
          [time],
        ),
        returnValue: _i8.Future<List<_i3.Category>>.value(<_i3.Category>[]),
      ) as _i8.Future<List<_i3.Category>>);

  @override
  _i8.Future<int> put(
    _i3.Category? category, {
    _i6.SyncSource? syncSource = _i6.SyncSource.local,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [category],
          {#syncSource: syncSource},
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<List<_i3.Category>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i8.Future<List<_i3.Category>>.value(<_i3.Category>[]),
      ) as _i8.Future<List<_i3.Category>>);

  @override
  _i8.Future<_i3.Category?> getById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i8.Future<_i3.Category?>.value(),
      ) as _i8.Future<_i3.Category?>);

  @override
  _i8.Future<List<_i3.Category>> getManyByIds(
    List<int>? ids, {
    bool? includeDeleted = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getManyByIds,
          [ids],
          {#includeDeleted: includeDeleted},
        ),
        returnValue: _i8.Future<List<_i3.Category>>.value(<_i3.Category>[]),
      ) as _i8.Future<List<_i3.Category>>);

  @override
  _i8.Future<bool> remove(int? id) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [id],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> restoreCategory(int? id) => (super.noSuchMethod(
        Invocation.method(
          #restoreCategory,
          [id],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<int> assignUserIdToNullEntries(String? newUserId) =>
      (super.noSuchMethod(
        Invocation.method(
          #assignUserIdToNullEntries,
          [newUserId],
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> removeNonDefaultForCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #removeNonDefaultForCurrentUser,
          [],
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> removeAll() => (super.noSuchMethod(
        Invocation.method(
          #removeAll,
          [],
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<List<int>> putMany(
    List<_i3.Category>? entities, {
    _i6.SyncSource? syncSource = _i6.SyncSource.local,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putMany,
          [entities],
          {#syncSource: syncSource},
        ),
        returnValue: _i8.Future<List<int>>.value(<int>[]),
      ) as _i8.Future<List<int>>);

  @override
  _i8.Future<bool> hasLocalOnlyData() => (super.noSuchMethod(
        Invocation.method(
          #hasLocalOnlyData,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<int> hardDeleteAllForCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #hardDeleteAllForCurrentUser,
          [],
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<int> removeMany(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #removeMany,
          [ids],
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<bool> softRemove(int? id) => (super.noSuchMethod(
        Invocation.method(
          #softRemove,
          [id],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> restore(int? id) => (super.noSuchMethod(
        Invocation.method(
          #restore,
          [id],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}

/// A class which mocks [FilterCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilterCubit extends _i1.Mock implements _i13.FilterCubit {
  MockFilterCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.FilterState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeFilterState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.FilterState);

  @override
  _i8.Stream<_i4.FilterState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i8.Stream<_i4.FilterState>.empty(),
      ) as _i8.Stream<_i4.FilterState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void changeSelectedAccount(_i10.Account? account) => super.noSuchMethod(
        Invocation.method(
          #changeSelectedAccount,
          [account],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changeSelectedCategories(List<_i3.Category>? categories) =>
      super.noSuchMethod(
        Invocation.method(
          #changeSelectedCategories,
          [categories],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changeMinAmount(double? minAmount) => super.noSuchMethod(
        Invocation.method(
          #changeMinAmount,
          [minAmount],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changeIsIncome(bool? isIncome) => super.noSuchMethod(
        Invocation.method(
          #changeIsIncome,
          [isIncome],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resetFilters() => super.noSuchMethod(
        Invocation.method(
          #resetFilters,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void emit(_i4.FilterState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i14.Change<_i4.FilterState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
